/*
 * generated by Xtext 2.36.0
 */
lexer grammar InternalQualityBtCppLexer;

@header {
package org.xtext.btcpp.ide.contentassist.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

KeepRunningUntilFailure : 'KeepRunningUntilFailure';

EntryUpdatedDecorator : 'EntryUpdatedDecorator';

EntryUpdatedAction : 'EntryUpdatedAction';

ScriptCondition : 'ScriptCondition';

UnsetBlackboard : 'UnsetBlackboard';

ManualSelector : 'ManualSelector';

ThreadedAction : 'ThreadedAction';

AlwaysFailure : 'AlwaysFailure';

AlwaysSuccess : 'AlwaysSuccess';

SetBlackboard : 'SetBlackboard';

BehaviorTree : 'BehaviorTree';

ConsumeQueue : 'ConsumeQueue';

ForceFailure : 'ForceFailure';

ForceSuccess : 'ForceSuccess';

PopFromQueue : 'PopFromQueue';

Precondition : 'Precondition';

ScriptAction : 'ScriptAction';

Num_attempts : 'num_attempts';

WhileDoElse : 'WhileDoElse';

Description : 'description';

CoroAction : 'CoroAction';

IfThenElse : 'IfThenElse';

QualityReq : 'QualityReq';

Delay_msec : 'delay_msec';

Num_cycles : 'num_cycles';

Output_key : 'output_key';

Parameters : 'parameters';

Satisfices : 'satisfices';

Satisfies : 'satisfies';

Inverter : 'Inverter';

Quality : 'Quality';

RunOnce : 'RunOnce';

SubTree : 'SubTree';

Timeout : 'Timeout';

Repeat : 'Repeat';

Switch : 'Switch';

All : 'All||';

Delay : 'Delay';

Retry : 'Retry';

Sleep : 'Sleep';

Value : 'value';

Loop : 'Loop';

Root : 'Root';

Test : 'Test';

Msec : 'msec';

Name : 'name';

M : 'M->';

R_1 : 'R->';

HyphenMinusGreaterThanSign : '->';

ID : 'ID';

R : 'R?';

VerticalLineVerticalLine : '||';

LeftParenthesis : '(';

RightParenthesis : ')';

Comma : ',';

EqualsSign : '=';

QuestionMark : '?';

RULE_NL : ('\r'? '\n')+;

fragment RULE_BEGIN : ;

fragment RULE_END : ;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
