// automatically generated by Xtext
grammar org.xtext.chalmers.qualitybt.QualityBt with org.eclipse.xtext.common.Terminals

import "http://www.example.org/btcpp" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Root returns Root:
	'root' main_tree_to_execute=EString
		BEGIN behaviortrees+=BehaviorTree (behaviortrees+=BehaviorTree)* END
		;


TreeNode returns TreeNode:
	(LeafNode | ControlNode | DecoratorNode | SubTree);

LeafNode returns LeafNode:
	ActionNodeBase | SimpleConditionNode;
	
ActionNodeBase returns ActionNodeBase:
	SimpleActionNode | AlwaysSuccessNode | AlwaysFailureNode| SetBlackboardNode ;
	
ControlNode returns ControlNode:
	ReactiveSequence | SequenceNode | FallbackNode | ReactiveFallback | SequenceStarNode | ParallelNode | IfThenElseNode | SwitchNode | WhileDoElseNode | MnualNode;

DecoratorNode returns DecoratorNode:
	RepeatNode | ForceFailureNode | ForceSuccessNode | RetryNode | InverterNode | TimeoutNode | KeepRunningUntilFailureNode | TimerQueueNode | BlackboardCheckInt | BlackboardCheckDouble |BlackboardCheckString;


BehaviorTree returns BehaviorTree:
	'BehaviorTree'
		'ID' "=" ID=EString
		BEGIN node+=TreeNode (node+=TreeNode)*  END
;

EString returns ecore::EString:
	STRING | ID;

enum NodeType returns NodeType:
				UNDEFINED = 'UNDEFINED' | ACTION = 'ACTION' | CONDITION = 'CONDITION' | CONTROL = 'CONTROL' | DECORATOR = 'DECORATOR' | SUBTREE = 'SUBTREE';

enum NodeStatus returns NodeStatus:
				IDLE = 'IDLE' | RUNNING = 'RUNNING' | SUCCESS = 'SUCCESS' | FAILURE = 'FAILURE';

Parameter returns Parameter:
		key=EString "=" value=EString
;

AlwaysFailureNode returns AlwaysFailureNode:
	{AlwaysFailureNode}
	'AlwaysFailure'
//	name=EString
//		('ID' uID=EString)?
//		('NodeType' NodeType=NodeType)?
//		('NodeStatus' NodeStatus=NodeStatus)?
//		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
;

AlwaysSuccessNode returns AlwaysSuccessNode:
	{AlwaysSuccessNode}
	'AlwaysSuccessNode'
	name=EString
	'{'
		('ID' uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

SetBlackboardNode returns SetBlackboardNode:
	'SetBlackboardNode'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		'value' value=EString
		'output_key' output_key=EString
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

FallbackNode returns FallbackNode:
	'FallbackNode'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		'child' '{' child+=TreeNode ( "," child+=TreeNode)* '}' 
	'}';

IfThenElseNode returns IfThenElseNode:
	'IfThenElseNode'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		'child' '{' child+=TreeNode ( "," child+=TreeNode)* '}' 
	'}';

MnualNode returns MnualNode:
	'MnualNode'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		'child' '{' child+=TreeNode ( "," child+=TreeNode)* '}' 
	'}';

ParallelNode returns ParallelNode:
	'ParallelNode'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		'child' '{' child+=TreeNode ( "," child+=TreeNode)* '}' 
	'}';

SequenceStarNode returns SequenceStarNode:
	'SequenceStarNode'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		'child' '{' child+=TreeNode ( "," child+=TreeNode)* '}' 
	'}';

SwitchNode returns SwitchNode:
	'SwitchNode'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		'child' '{' child+=TreeNode ( "," child+=TreeNode)* '}' 
	'}';

ReactiveFallback returns ReactiveFallback:
	'ReactiveFallback'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		'child' '{' child+=TreeNode ( "," child+=TreeNode)* '}' 
	'}';

WhileDoElseNode returns WhileDoElseNode:
	'WhileDoElseNode'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		'child' '{' child+=TreeNode ( "," child+=TreeNode)* '}' 
	'}';

ReactiveSequence returns ReactiveSequence:
	'ReactiveSequence'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		'child' '{' child+=TreeNode ( "," child+=TreeNode)* '}' 
	'}';

SequenceNode returns SequenceNode:
	'SequenceNode'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		'child' '{' child+=TreeNode ( "," child+=TreeNode)* '}' 
	'}';

SubtreeNode returns SubtreeNode:
	'SubtreeNode'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		'child' child=TreeNode
	'}';

TimeoutNode returns TimeoutNode:
	'TimeoutNode'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		'msec' msec=EString
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		'child' child=TreeNode
	'}';

KeepRunningUntilFailureNode returns KeepRunningUntilFailureNode:
	'KeepRunningUntilFailureNode'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		'child' child=TreeNode
	'}';

TimerQueueNode returns TimerQueueNode:
	'TimerQueueNode'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		'child' child=TreeNode
	'}';

InverterNode returns InverterNode:
	'InverterNode'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		'child' child=TreeNode
	'}';

ForceSuccessNode returns ForceSuccessNode:
	'ForceSuccessNode'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		'child' child=TreeNode
	'}';

ForceFailureNode returns ForceFailureNode:
	'ForceFailureNode'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		'child' child=TreeNode
	'}';

RepeatNode returns RepeatNode:
	'RepeatNode'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		'num_cycles' num_cycles=EString
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		'child' child=TreeNode
	'}';

SubTree returns SubTree:
	{SubTree}
	'SubTree'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		('child' '{' child+=TreeNode ( "," child+=TreeNode)* '}' )?
	'}';

SimpleActionNode returns SimpleActionNode:
	{SimpleActionNode}
	'SimpleActionNode'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

SimpleConditionNode returns SimpleConditionNode:
	{SimpleConditionNode}
	'SimpleConditionNode'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

RetryNode returns RetryNode:
	'RetryNode'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		'num_attempts' num_attempts=EString
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		'child' child=TreeNode
	'}';

BlackboardCheckInt returns BlackboardCheckInt:
	'BlackboardCheckInt'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		'return_on_mismatch' return_on_mismatch=NodeStatus
		'value_A' value_A=EString
		'value_B' value_B=EString
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		'child' child=TreeNode
	'}';

BlackboardCheckDouble returns BlackboardCheckDouble:
	'BlackboardCheckDouble'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		'return_on_mismatch' return_on_mismatch=NodeStatus
		'value_A' value_A=EString
		'value_B' value_B=EString
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		'child' child=TreeNode
	'}';

BlackboardCheckString returns BlackboardCheckString:
	'BlackboardCheckString'
	name=EString
	'{'
		("ID" uID=EString)?
		('NodeType' NodeType=NodeType)?
		('NodeStatus' NodeStatus=NodeStatus)?
		'return_on_mismatch' return_on_mismatch=NodeStatus
		'value_A' value_A=EString
		'value_B' value_B=EString
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		'child' child=TreeNode
	'}';
	
terminal NL: ('\r'?'\n')+;
terminal BEGIN: 'synthetic:BEGIN';
terminal END: 'synthetic:END';
