/*
 * generated by Xtext 2.36.0
 */
lexer grammar InternalQualityBtLexer;

@header {
package org.xtext.chalmers.qualitybt.parser.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

KeepRunningUntilFailureNode : 'KeepRunningUntilFailureNode';

BlackboardCheckDouble : 'BlackboardCheckDouble';

BlackboardCheckString : 'BlackboardCheckString';

SimpleConditionNode : 'SimpleConditionNode';

BlackboardCheckInt : 'BlackboardCheckInt';

Return_on_mismatch : 'return_on_mismatch';

AlwaysSuccessNode : 'AlwaysSuccessNode';

SetBlackboardNode : 'SetBlackboardNode';

ForceFailureNode : 'ForceFailureNode';

ForceSuccessNode : 'ForceSuccessNode';

ReactiveFallback : 'ReactiveFallback';

ReactiveSequence : 'ReactiveSequence';

SequenceStarNode : 'SequenceStarNode';

SimpleActionNode : 'SimpleActionNode';

WhileDoElseNode : 'WhileDoElseNode';

IfThenElseNode : 'IfThenElseNode';

TimerQueueNode : 'TimerQueueNode';

AlwaysFailure : 'AlwaysFailure';

BehaviorTree : 'BehaviorTree';

FallbackNode : 'FallbackNode';

InverterNode : 'InverterNode';

ParallelNode : 'ParallelNode';

SequenceNode : 'SequenceNode';

Num_attempts : 'num_attempts';

SubtreeNode : 'SubtreeNode';

TimeoutNode : 'TimeoutNode';

NodeStatus : 'NodeStatus';

RepeatNode : 'RepeatNode';

SwitchNode : 'SwitchNode';

Num_cycles : 'num_cycles';

Output_key : 'output_key';

Parameters : 'parameters';

CONDITION : 'CONDITION';

DECORATOR : 'DECORATOR';

MnualNode : 'MnualNode';

RetryNode : 'RetryNode';

UNDEFINED : 'UNDEFINED';

NodeType : 'NodeType';

CONTROL : 'CONTROL';

FAILURE : 'FAILURE';

RUNNING : 'RUNNING';

SUBTREE : 'SUBTREE';

SUCCESS : 'SUCCESS';

SubTree : 'SubTree';

Value_A : 'value_A';

Value_B : 'value_B';

ACTION : 'ACTION';

Child : 'child';

Value : 'value';

IDLE : 'IDLE';

Msec : 'msec';

Root : 'root';

ID : 'ID';

Comma : ',';

EqualsSign : '=';

LeftCurlyBracket : '{';

RightCurlyBracket : '}';

RULE_NL : ('\r'? '\n')+;

fragment RULE_BEGIN : ;

fragment RULE_END : ;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
