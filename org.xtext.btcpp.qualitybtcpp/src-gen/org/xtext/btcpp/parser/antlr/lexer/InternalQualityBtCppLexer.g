/*
 * generated by Xtext 2.36.0
 */
lexer grammar InternalQualityBtCppLexer;

@header {
package org.xtext.btcpp.parser.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

KeepRunningUntilFailureNode : 'KeepRunningUntilFailureNode';

EntryUpdatedDecoratorNode : 'EntryUpdatedDecoratorNode';

EntryUpdatedActionNode : 'EntryUpdatedActionNode';

SequenceWithMemoryNode : 'SequenceWithMemoryNode';

ReactiveFallbackNode : 'ReactiveFallbackNode';

ReactiveSequenceNode : 'ReactiveSequenceNode';

ScriptConditionNode : 'ScriptConditionNode';

UnsetBlackboardNode : 'UnsetBlackboardNode';

ManualSelectorNode : 'ManualSelectorNode';

ThreadedActionNode : 'ThreadedActionNode';

AlwaysSuccessNode : 'AlwaysSuccessNode';

SetBlackboardNode : 'SetBlackboardNode';

ConsumeQueueNode : 'ConsumeQueueNode';

ForceFailureNode : 'ForceFailureNode';

ForceSuccessNode : 'ForceSuccessNode';

PopFromQueueNode : 'PopFromQueueNode';

PreconditionNode : 'PreconditionNode';

ParallelAllNode : 'ParallelAllNode';

WhileDoElseNode : 'WhileDoElseNode';

CoroActionNode : 'CoroActionNode';

IfThenElseNode : 'IfThenElseNode';

AlwaysFailure : 'AlwaysFailure';

FallbackNode : 'FallbackNode';

InverterNode : 'InverterNode';

ParallelNode : 'ParallelNode';

SequenceNode : 'SequenceNode';

Behaviortree : 'behaviortree';

Num_attempts : 'num_attempts';

RunOnceNode : 'RunOnceNode';

TimeoutNode : 'TimeoutNode';

Description : 'description';

RepeatNode : 'RepeatNode';

ScriptNode : 'ScriptNode';

SwitchNode : 'SwitchNode';

Delay_msec : 'delay_msec';

Num_cycles : 'num_cycles';

Output_key : 'output_key';

Parameters : 'parameters';

Qualityreq : 'qualityreq';

Satisfices : 'satisfices';

DelayNode : 'DelayNode';

RetryNode : 'RetryNode';

SleepNode : 'SleepNode';

Satisfies : 'satisfies';

LoopNode : 'LoopNode';

TestNode : 'TestNode';

Quality : 'Quality';

SubTree : 'SubTree';

Child : 'child';

Value : 'value';

Msec : 'msec';

Name : 'name';

Root : 'root';

ID : 'ID';

LeftParenthesis : '(';

RightParenthesis : ')';

Comma : ',';

EqualsSign : '=';

LeftCurlyBracket : '{';

RightCurlyBracket : '}';

RULE_NL : ('\r'? '\n')+;

fragment RULE_BEGIN : ;

fragment RULE_END : ;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
